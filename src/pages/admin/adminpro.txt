import { useState } from 'react';
import { 
  Plus, 
  Search, 
  Package, 
  Edit, 
  Trash2, 
  X, 
  Save,
  AlertTriangle
} from 'lucide-react';
import { useProducts } from '../../hooks/useProducts';
import { Product } from '../../types';

const AdminProducts = () => {
  const { products, addProduct, updateProduct, deleteProduct } = useProducts();
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingProductId, setEditingProductId] = useState<string | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null);
  
  // New product form state
  const [newProduct, setNewProduct] = useState<Omit<Product, 'id' | 'createdAt'>>({
    name: '',
    description: '',
    price: 0,
    features: [''],
    imageUrl: '',
    stock: 0
  });
  
  // Edit product form state
  const [editProduct, setEditProduct] = useState<Partial<Product>>({});
  
  // Format price to BRL
  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(price);
  };
  
  // Filter products based on search term
  const filteredProducts = products.filter(product => 
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.description.toLowerCase().includes(searchTerm.toLowerCase())
  );
  
  // Handle add product form changes
  const handleAddFormChange = (field: string, value: string | number | string[]) => {
    setNewProduct(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  // Handle add feature to new product
  const handleAddFeature = () => {
    setNewProduct(prev => ({
      ...prev,
      features: [...prev.features, '']
    }));
  };
  
  // Handle edit feature in new product
  const handleEditFeature = (index: number, value: string) => {
    setNewProduct(prev => {
      const features = [...prev.features];
      features[index] = value;
      return {
        ...prev,
        features
      };
    });
  };
  
  // Handle remove feature from new product
  const handleRemoveFeature = (index: number) => {
    setNewProduct(prev => {
      const features = prev.features.filter((_, i) => i !== index);
      return {
        ...prev,
        features: features.length > 0 ? features : ['']
      };
    });
  };
  
  // Handle submit add product form
  const handleAddProduct = () => {
    // Validate form
    if (!newProduct.name || !newProduct.description || newProduct.price <= 0 || !newProduct.imageUrl) {
      alert('Por favor, preencha todos os campos obrigatórios.');
      return;
    }
    
    // Filter out empty features
    const filteredFeatures = newProduct.features.filter(f => f.trim() !== '');
    
    // Add product
    addProduct({
      ...newProduct,
      features: filteredFeatures.length > 0 ? filteredFeatures : ['Conta padrão']
    });
    
    // Reset form
    setNewProduct({
      name: '',
      description: '',
      price: 0,
      features: [''],
      imageUrl: '',
      stock: 0
    });
    
    // Hide form
    setShowAddForm(false);
  };
  
  // Handle edit product
  const handleStartEdit = (product: Product) => {
    setEditingProductId(product.id);
    setEditProduct({...product});
  };
  
  // Handle edit product form changes
  const handleEditFormChange = (field: string, value: string | number | string[]) => {
    setEditProduct(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  // Handle add feature to edit product
  const handleAddEditFeature = () => {
    setEditProduct(prev => ({
      ...prev,
      features: [...(prev.features || []), '']
    }));
  };
  
  // Handle edit feature in edit product
  const handleEditFeatureInEdit = (index: number, value: string) => {
    setEditProduct(prev => {
      const features = [...(prev.features || [])];
      features[index] = value;
      return {
        ...prev,
        features
      };
    });
  };
  
  // Handle remove feature from edit product
  const handleRemoveFeatureFromEdit = (index: number) => {
    setEditProduct(prev => {
      const features = (prev.features || []).filter((_, i) => i !== index);
      return {
        ...prev,
        features: features.length > 0 ? features : ['']
      };
    });
  };
  
  // Handle submit edit product form
  const handleSaveEdit = () => {
    if (!editingProductId) return;
    
    // Validate form
    if (!editProduct.name || !editProduct.description || !editProduct.price || !editProduct.imageUrl) {
      alert('Por favor, preencha todos os campos obrigatórios.');
      return;
    }
    
    // Filter out empty features
    const filteredFeatures = (editProduct.features || []).filter(f => f.trim() !== '');
    
    // Update product
    updateProduct(editingProductId, {
      ...editProduct,
      features: filteredFeatures.length > 0 ? filteredFeatures : ['Conta padrão']
    });
    
    // Reset
    setEditingProductId(null);
    setEditProduct({});
  };
  
  // Handle cancel edit
  const handleCancelEdit = () => {
    setEditingProductId(null);
    setEditProduct({});
  };
  
  // Handle delete product
  const handleDeleteProduct = (id: string) => {
    deleteProduct(id);
    setShowDeleteConfirm(null);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-white">Gerenciar Produtos</h1>
        <button
          onClick={() => setShowAddForm(!showAddForm)}
          className="btn btn-primary"
        >
          <Plus className="h-5 w-5 mr-2" />
          Adicionar Produto
        </button>
      </div>
      
      {/* Add Product Form */}
      {showAddForm && (
        <div className="bg-bg-light rounded-lg p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-white">Adicionar Novo Produto</h2>
            <button
              onClick={() => setShowAddForm(false)}
              className="text-gray-400 hover:text-white"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-white font-medium mb-1">
                Nome do Produto*
              </label>
              <input
                type="text"
                className="input"
                value={newProduct.name}
                onChange={(e) => handleAddFormChange('name', e.target.value)}
                placeholder="Ex: Conta Blox Fruit - Premium"
              />
            </div>
            
            <div>
              <label className="block text-white font-medium mb-1">
                Preço (R$)*
              </label>
              <input
                type="number"
                min="0"
                step="0.01"
                className="input"
                value={newProduct.price}
                onChange={(e) => handleAddFormChange('price', parseFloat(e.target.value) || 0)}
                placeholder="Ex: 99.90"
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-white font-medium mb-1">
                Descrição*
              </label>
              <textarea
                className="input"
                rows={3}
                value={newProduct.description}
                onChange={(e) => handleAddFormChange('description', e.target.value)}
                placeholder="Descreva o produto com detalhes relevantes..."
              ></textarea>
            </div>
            
            <div>
              <label className="block text-white font-medium mb-1">
                URL da Imagem*
              </label>
              <input
                type="text"
                className="input"
                value={newProduct.imageUrl}
                onChange={(e) => handleAddFormChange('imageUrl', e.target.value)}
                placeholder="https://exemplo.com/imagem.jpg"
              />
            </div>
            
            <div>
              <label className="block text-white font-medium mb-1">
                Estoque*
              </label>
              <input
                type="number"
                min="0"
                className="input"
                value={newProduct.stock}
                onChange={(e) => handleAddFormChange('stock', parseInt(e.target.value) || 0)}
                placeholder="Ex: 5"
              />
            </div>
            
            <div className="md:col-span-2">
              <label className="block text-white font-medium mb-1">
                Características
              </label>
              
              {newProduct.features.map((feature, index) => (
                <div key={index} className="flex items-center gap-2 mb-2">
                  <input
                    type="text"
                    className="input"
                    value={feature}
                    onChange={(e) => handleEditFeature(index, e.target.value)}
                    placeholder="Ex: Nível 100"
                  />
                  <button
                    onClick={() => handleRemoveFeature(index)}
                    className="text-gray-400 hover:text-red-500"
                    disabled={newProduct.features.length === 1}
                  >
                    <X className="h-5 w-5" />
                  </button>
                </div>
              ))}
              
              <button
                onClick={handleAddFeature}
                className="text-primary hover:text-primary-dark mt-2 flex items-center"
              >
                <Plus className="h-4 w-4 mr-1" />
                Adicionar Característica
              </button>
            </div>
          </div>
          
          <div className="flex justify-end gap-3">
            <button
              onClick={() => setShowAddForm(false)}
              className="btn btn-dark"
            >
              Cancelar
            </button>
            <button
              onClick={handleAddProduct}
              className="btn btn-primary"
            >
              <Save className="h-5 w-5 mr-2" />
              Salvar Produto
            </button>
          </div>
        </div>
      )}
      
      {/* Search & Filter */}
      <div className="bg-bg-light p-4 rounded-lg mb-6">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type="text"
            placeholder="Buscar produtos..."
            className="input pl-10 w-full"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>
      
      {/* Products Table */}
      {filteredProducts.length === 0 ? (
        <div className="bg-bg-light rounded-lg p-8 text-center">
          <Package className="h-16 w-16 text-gray-600 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-white mb-2">
            Nenhum produto encontrado
          </h2>
          <p className="text-gray-400 mb-4">
            {searchTerm 
              ? 'Tente usar termos de busca diferentes ou adicione um novo produto.'
              : 'Você ainda não tem produtos. Adicione seu primeiro produto.'}
          </p>
          <button
            onClick={() => setShowAddForm(true)}
            className="btn btn-primary inline-flex items-center"
          >
            <Plus className="h-5 w-5 mr-2" />
            Adicionar Produto
          </button>
        </div>
      ) : (
        <div className="bg-bg-light rounded-lg overflow-hidden">
          <table className="w-full">
            <thead>
              <tr className="bg-bg-dark">
                <th className="text-left py-3 px-4 text-white font-semibold">Produto</th>
                <th className="text-center py-3 px-4 text-white font-semibold">Preço</th>
                <th className="text-center py-3 px-4 text-white font-semibold">Estoque</th>
                <th className="text-right py-3 px-4 text-white font-semibold">Ações</th>
              </tr>
            </thead>
            <tbody>
              {filteredProducts.map(product => (
                <tr key={product.id} className="border-t border-gray-700">
                  {editingProductId === product.id ? (
                    // Edit mode row
                    <td colSpan={4} className="py-4 px-4">
                      <div className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label className="block text-white font-medium mb-1">
                              Nome do Produto*
                            </label>
                            <input
                              type="text"
                              className="input"
                              value={editProduct.name || ''}
                              onChange={(e) => handleEditFormChange('name', e.target.value)}
                            />
                          </div>
                          
                          <div>
                            <label className="block text-white font-medium mb-1">
                              Preço (R$)*
                            </label>
                            <input
                              type="number"
                              min="0"
                              step="0.01"
                              className="input"
                              value={editProduct.price || 0}
                              onChange={(e) => handleEditFormChange('price', parseFloat(e.target.value) || 0)}
                            />
                          </div>
                          
                          <div className="md:col-span-2">
                            <label className="block text-white font-medium mb-1">
                              Descrição*
                            </label>
                            <textarea
                              className="input"
                              rows={3}
                              value={editProduct.description || ''}
                              onChange={(e) => handleEditFormChange('description', e.target.value)}
                            ></textarea>
                          </div>
                          
                          <div>
                            <label className="block text-white font-medium mb-1">
                              URL da Imagem*
                            </label>
                            <input
                              type="text"
                              className="input"
                              value={editProduct.imageUrl || ''}
                              onChange={(e) => handleEditFormChange('imageUrl', e.target.value)}
                            />
                          </div>
                          
                          <div>
                            <label className="block text-white font-medium mb-1">
                              Estoque*
                            </label>
                            <input
                              type="number"
                              min="0"
                              className="input"
                              value={editProduct.stock || 0}
                              onChange={(e) => handleEditFormChange('stock', parseInt(e.target.value) || 0)}
                            />
                          </div>
                          
                          <div className="md:col-span-2">
                            <label className="block text-white font-medium mb-1">
                              Características
                            </label>
                            
                            {(editProduct.features || []).map((feature, index) => (
                              <div key={index} className="flex items-center gap-2 mb-2">
                                <input
                                  type="text"
                                  className="input"
                                  value={feature}
                                  onChange={(e) => handleEditFeatureInEdit(index, e.target.value)}
                                />
                                <button
                                  onClick={() => handleRemoveFeatureFromEdit(index)}
                                  className="text-gray-400 hover:text-red-500"
                                  disabled={(editProduct.features || []).length === 1}
                                >
                                  <X className="h-5 w-5" />
                                </button>
                              </div>
                            ))}
                            
                            <button
                              onClick={handleAddEditFeature}
                              className="text-primary hover:text-primary-dark mt-2 flex items-center"
                            >
                              <Plus className="h-4 w-4 mr-1" />
                              Adicionar Característica
                            </button>
                          </div>
                        </div>
                        
                        <div className="flex justify-end gap-3">
                          <button
                            onClick={handleCancelEdit}
                            className="btn btn-dark"
                          >
                            Cancelar
                          </button>
                          <button
                            onClick={handleSaveEdit}
                            className="btn btn-primary"
                          >
                            <Save className="h-5 w-5 mr-2" />
                            Salvar Alterações
                          </button>
                        </div>
                      </div>
                    </td>
                  ) : (
                    // Normal row
                    <>
                      <td className="py-3 px-4">
                        <div className="flex items-center">
                          <div className="w-10 h-10 bg-bg-dark rounded-md overflow-hidden mr-3">
                            <img 
                              src={product.imageUrl} 
                              alt={product.name} 
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div>
                            <div className="text-white font-medium">{product.name}</div>
                            <div className="text-gray-400 text-sm truncate max-w-xs">
                              {product.description.length > 50
                                ? `${product.description.substring(0, 50)}...`
                                : product.description}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="py-3 px-4 text-center text-white">
                        {formatPrice(product.price)}
                      </td>
                      <td className="py-3 px-4 text-center">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          product.stock === 0
                            ? 'bg-red-500 bg-opacity-10 text-red-500'
                            : product.stock <= 2
                              ? 'bg-yellow-500 bg-opacity-10 text-yellow-500'
                              : 'bg-green-500 bg-opacity-10 text-green-500'
                        }`}>
                          {product.stock === 0 
                            ? 'Esgotado' 
                            : `${product.stock} ${product.stock === 1 ? 'unidade' : 'unidades'}`}
                        </span>
                      </td>
                      <td className="py-3 px-4 text-right">
                        <div className="flex items-center justify-end space-x-2">
                          <button
                            onClick={() => handleStartEdit(product)}
                            className="p-1 rounded-full hover:bg-bg-dark text-gray-400 hover:text-white transition-colors"
                          >
                            <Edit className="h-5 w-5" />
                          </button>
                          {showDeleteConfirm === product.id ? (
                            <div className="flex items-center bg-bg-dark rounded-lg p-1">
                              <span className="text-white text-sm mx-2">Confirmar?</span>
                              <button
                                onClick={() => handleDeleteProduct(product.id)}
                                className="p-1 rounded-full text-red-500 hover:bg-red-500 hover:bg-opacity-10"
                              >
                                <Trash2 className="h-5 w-5" />
                              </button>
                              <button
                                onClick={() => setShowDeleteConfirm(null)}
                                className="p-1 rounded-full text-gray-400 hover:text-white"
                              >
                                <X className="h-5 w-5" />
                              </button>
                            </div>
                          ) : (
                            <button
                              onClick={() => setShowDeleteConfirm(product.id)}
                              className="p-1 rounded-full hover:bg-bg-dark text-gray-400 hover:text-red-500 transition-colors"
                            >
                              <Trash2 className="h-5 w-5" />
                            </button>
                          )}
                        </div>
                      </td>
                    </>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default AdminProducts;